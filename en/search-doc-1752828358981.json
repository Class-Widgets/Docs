{"searchDocs":[{"title":"首页","type":0,"sectionRef":"#","url":"/en/community/","content":"","keywords":"","version":"Next"},{"title":"👋 欢迎来到 Class Widgets 社区规范​","type":1,"pageTitle":"首页","url":"/en/community/#-欢迎来到-class-widgets-社区规范","content":" 欢迎加入我们的QQ群： 698599898  ","version":"Next","tagName":"h2"},{"title":"了解 Class Widgets","type":0,"sectionRef":"#","url":"/en/about","content":"","keywords":"","version":"Next"},{"title":"小组件（主界面）​","type":1,"pageTitle":"了解 Class Widgets","url":"/en/about#小组件主界面","content":"   启动 Class Widgets 后，您将看到小组件会从屏幕顶部飞入。小组件将会显示设置好的课程表及当前日程。 若需要暂时隐藏 Class Widgets，单击无功能的小组件后小组件将会收起并露出底部。若想再次显示，仅需点击小组件底部。 若想完全隐藏 Class Widgets，请右键托盘菜单并点击“显示/隐藏主界面”即可，若想恢复，再次点击该按钮即可。 小组件也支持自定义，详见“自定义”  ","version":"Next","tagName":"h2"},{"title":"托盘菜单​","type":1,"pageTitle":"了解 Class Widgets","url":"/en/about#托盘菜单","content":"   Class Widgets 启动后会在系统托盘区创建托盘图标，右键即可展开托盘菜单。若您未能看到托盘图标，请点击左侧的展开按钮。 单击托盘图标，可快捷地让顶部的小组件隐藏； 同时，在托盘菜单中，您可以访问软件的各个功能。  ","version":"Next","tagName":"h2"},{"title":"自定义​","type":1,"pageTitle":"了解 Class Widgets","url":"/en/about#自定义","content":"   您可以通过“设置”中的“自定义”板块自定义小组件显示样式和信息。您可以在下拉栏选择需要添加的小组件，并根据需要对小组件进行添加/移除，且能更改关于小组件的设置。 此外还能通过拖动列表中的小组件名称来改变排列顺序。 详细操作详见 “了解自定义”。 ","version":"Next","tagName":"h2"},{"title":"管理群聊规范","type":0,"sectionRef":"#","url":"/en/community/admin","content":"","keywords":"","version":"Next"},{"title":"2025 第一版​","type":1,"pageTitle":"管理群聊规范","url":"/en/community/admin#2025-第一版","content":" 引入​  感谢您与其他管理员参与 Class Widgets 社区的管理，在本群，您应当适当使用您的权利保证我们良好的社区环境。 所以，为了保证良好的社区环境不被破坏，请所有 Class Widgets 的群管理遵循以下规则：  管理规则​  在对群内进行管理时，请尽力做到友好讨论，遵守相关法律法规；不得滥用群管理的权力以干扰 Class Widgets 社区的环境；对违规群员进行处罚时，请严格遵守&quot;处理方法&quot;中的条例。  处理方法​  若您发现有某个群员违反群规则，请视情节对其进行下列处理：  若在第一次违反规则时，可口头警告且强制撤回违规内容；禁言处理（由严重程度决定长度） 48 分钟16 小时24 小时2 周 处罚力度可依据违规次数升级。若违规群员对处理结果有异议，请立即在群内发起投票进行公正处理。  违规处理​  此条例是对群管理员的处罚方法。 若您未能遵循以上规则，没能做到群管理的责任，您将会受到以下处理：  口头警告且对您的违规情况进行道歉；暂停管理权力（由严重程度决定时间长度） 1 天4 天8 天2 周永久撤销管理权力 处罚力度会随着违规次数升级。若您对处理结果有异议，请在处理后48小时内联系群主申诉。  附录​  本规范将依据情况不定时修订，请密切留意； 本规范将在2025年1月15日起生效； 感谢您对本规范的支持与配合！望大家能共同营造一个良好的交流社区。 ","version":"Next","tagName":"h2"},{"title":"用户群聊规范","type":0,"sectionRef":"#","url":"/en/community/user","content":"","keywords":"","version":"Next"},{"title":"2025 第一版​","type":1,"pageTitle":"用户群聊规范","url":"/en/community/user#2025-第一版","content":" 引入​  感谢您选择 Class Widgets，在本群您可和群友互相友好讨论共同话题。也可为 Class Widgets 提出意见和反馈问题。当然，为了保证良好的社区环境，在此群请遵循以下规则：  群规​ 规则​ 交流时请尽力做到友好讨论，遵守相关法律法规。禁止违规发布下列内容： 色情低俗、血腥恐怖、赌博犯罪、政治宗教等敏感/违法的内容侵犯他人隐私、侮辱他人、人身攻击的内容禁止发布含病毒、木马等恶意软件、文件不得过度刷屏获得群主/管理员授权后，后才可邀请您的Bot到本群可以在群众适度倾述您的烦恼。但不得在群众过度发泄您的负面情绪，以免影响他人其他未提及的敏感/违规/违法的内容 提问/求助方式​ 提问前，请先在这些地方力所能及地查找您提出的问题： Class Widgets 使用文档GitHub Issues搜索引擎（必应、百度、谷歌等） tip 若您的问题在这些地方并没有解决方案，再进行下列步骤。 提问内容中请提供足够的信息，以便更容易获得帮助。如： 系统环境（操作系统版本等）程序日志崩溃报告参考文献：提问的智慧 违规处理​  若您违反上述规则，可能会视情节收到下列处理：  口头警告且强制撤回违规内容；禁言处理（由严重程度决定长度） 48 分钟16 小时24 小时2 周 其他处罚，包括但不限于踢出群聊等极端处罚方法。  处罚力度会随着违规次数升级。若您对处理结果有异议，请在处理后48小时内联系群主/管理员申诉。  举报​  若您发现有群友或群管理员违反了我们的群聊规范，可向群主/（其他）管理员进行举报： 群管理员的规范可在此处浏览 举报方式：  群内直接举报；向群主/管理员私信举报。  附录​  本规范将依据情况不定时修订，请密切留意； 本规范将在2024年12月29日起生效； 感谢您对本规范的支持与配合！望大家能共同营造一个良好的交流社区。 ","version":"Next","tagName":"h2"},{"title":"开始","type":0,"sectionRef":"#","url":"/en/dev/","content":"","keywords":"","version":"Next"},{"title":"👋 欢迎阅读 Class Widgets 开发文档​","type":1,"pageTitle":"开始","url":"/en/dev/#-欢迎阅读-class-widgets-开发文档","content":" 此开发文档将会带领你了解 Class Widgets 的技术细节。 欢迎开发者们参与本文档的修订  ","version":"Next","tagName":"h2"},{"title":"💭 猜你想问？​","type":1,"pageTitle":"开始","url":"/en/dev/#-猜你想问","content":" --暂未编写--  ⬇️ 详细了解 Class Widgets  GitHub: https://github.com/RinLit-233-shiroko/Class-Widgets Release 发布页：https://github.com/RinLit-233-shiroko/Class-Widgets/releases 哔哩哔哩：https://www.bilibili.com/video/BV1xwW9eyEGu/  📃 贡献者  Mike-Luo-Leap 提供部分稿件 ","version":"Next","tagName":"h2"},{"title":"插件编写","type":0,"sectionRef":"#","url":"/en/dev/plugin/","content":"","keywords":"","version":"Next"},{"title":"要求​","type":1,"pageTitle":"插件编写","url":"/en/dev/plugin/#要求","content":" 您已按照前文的方法配置完 Class Widgets 开发环境；能够掌握 PyQt5 的通用写法；能够正常访问 GitHub（无论以何种方式）  如果你能满足以上要求，那就让我们编写插件吧！ ","version":"Next","tagName":"h2"},{"title":"进阶操作","type":0,"sectionRef":"#","url":"/en/dev/plugin/advanced","content":"","keywords":"","version":"Next"},{"title":"引入其他第三方库​","type":1,"pageTitle":"进阶操作","url":"/en/dev/plugin/advanced#引入其他第三方库","content":" 当您的插件需要的第三方库但程序并未引入时，即可参考下列教程将第三方库部署于插件目录。 一首先，需要用 pip 将您需要安装的第三方库安装到插件目录； (一)在“资源管理器”中打开您的插件目录并在地址栏输入cmd    (二)输入如下命令：   pip install -t libs/ {您的第三方库} # 即在插件目录下的&quot;libs&quot;文件夹安装第三方库   二安装完成后在您的插件中增加以下代码： 💡 提示： 请更新您的插件模板以使用下方的代码。   from .ClassWidgets.base import load_libs # 导入CW的基类 load_libs() # 加载依赖库 # 现在即可导入第三方库 import {您的第三方库}   三🎉大功告成！现在您可以在您的插件中自由使用第三方库了！ ","version":"Next","tagName":"h2"},{"title":"插件接口","type":0,"sectionRef":"#","url":"/en/dev/plugin/context","content":"","keywords":"","version":"Next"},{"title":"如何调用接口？​","type":1,"pageTitle":"插件接口","url":"/en/dev/plugin/context#如何调用接口","content":" 仅需在 self.cw_contexts 中调用即可，代码如下：  from .ClassWidgets.base import PluginBase # 导入CW的基类 class Plugin(PluginBase): # 定义插件类 def __init__(self, cw_contexts, method): super().__init__(cw_contexts, method) # 调用父类初始化方法 def excute(self): # 启动后执行的代码 pass def update(self, cw_contexts): super().update(cw_contexts) # 获取最新的接口内容 print(f'当前天气：{self.current_weather}') # 从 self.cw_contexts 可调用接口   在 Class Widgets 加载上述内容时，将会在终端输出 Class Widgets 获取的天气信息。 如：当前天气：多云  ","version":"Next","tagName":"h3"},{"title":"插件接口​","type":1,"pageTitle":"插件接口","url":"/en/dev/plugin/context#插件接口-1","content":" 自定义小组件​  Widgets_Width (dict)：获取所有被注册小组件宽度的字典实例。Widgets_Name (dict)：获取所有被注册小组件名称的字典实例。Widgets_Code (dict)：获取所有被注册小组件代号的字典实例  获取课程状态​  Current_Lesson (str)：当前课程名。State (int)：上下课状态，0为课间，1为上课。  获取天气状况和通知内容​  Weather (str)：天气状况，Class Widgets 将会把自身获取到的天气情况返回到接口。 Temp (int)：当前温度，同上。 Notification (dict)：检测到的通知内容。通常于 notification_contents = { &quot;state&quot;: None, &quot;lesson_name&quot;: None, &quot;title&quot;: None, &quot;subtitle&quot;: None, &quot;content&quot;: None } 键（Key）\t内容键（Key）\t内容 state\t通知类型（0, 2分别为课间和放学；1为上课通知；3为预备铃；4为自定义通知） lesson_name\t课程名称（仅在1、0中生效） title\t通知标题（仅在4中生效） subtitle\t通知副标题（仅在4中生效） content\t通知标题（仅在4中生效）  关于插件​  PLUGIN_PATH (str)：获取插件的工作目录，以方便调取插件本地内容，如插件存储的图片、配置资源 ","version":"Next","tagName":"h3"},{"title":"插件结构","type":0,"sectionRef":"#","url":"/en/dev/plugin/structure","content":"","keywords":"","version":"Next"},{"title":"目录​","type":1,"pageTitle":"插件结构","url":"/en/dev/plugin/structure#目录","content":"  --plugin_path │ icon.png # 图标文件，将显示在插件广场、插件管理器，成为插件的标志 │ main.py # 主程序 │ plugin.json # 插件信息 | README.md # 插件简介信息，可在PluginPlaza查看 │ settings.ui # 设置页 │ __init__.py # 初始化文件，Class Widgets将会引入其中引用的内容 ├─ClassWidgets # 插件基类 │ base.py └─其他您需要添加的内容 其他自定义内容   ","version":"Next","tagName":"h3"},{"title":"内容结构​","type":1,"pageTitle":"插件结构","url":"/en/dev/plugin/structure#内容结构","content":" main.py (主程序)​  主程序执行的部分。   from .ClassWidgets.base import PluginBase, SettingsBase, PluginConfig # 导入CW的基类 class Plugin(PluginBase): # 插件类 def __init__(self, cw_contexts, method): # 初始化 super().__init__(cw_contexts, method) # 调用父类初始化方法 &quot;&quot;&quot; 插件初始化，插件被执行时将会执行此部分的代码 &quot;&quot;&quot; def execute(self): # 自启动执行部分 &quot;&quot;&quot; 当 Class Widgets启动时，将会执行此部分的代码 &quot;&quot;&quot; def update(self, cw_contexts): # 自动更新部分（每秒更新） super().update(cw_contexts) # 获取最新接口 &quot;&quot;&quot; Class Widgets 本体会每1秒更新一次状态，同时也会调用此部分的代码。 可在此部分插入动态更新的内容 &quot;&quot;&quot; class Settings(SettingsBase): # 设置类 def __init__(self, plugin_path, parent=None): # 初始化 super().__init__(plugin_path, parent) &quot;&quot;&quot; 在这里写设置页面 &quot;&quot;&quot; # 其他代码……   init.py（初始化插件）​  init.py 存放了插件所需要的方法，Class Widgets将会加载其中引入的内容。   from .main import Plugin # 从 main.py 导入 Plugin 类 from .main import Settings # 如果有定义设置类，则需要引入  ","version":"Next","tagName":"h3"},{"title":"配置开发环境","type":0,"sectionRef":"#","url":"/en/dev/configuration","content":"","keywords":"","version":"Next"},{"title":"确认系统需求​","type":1,"pageTitle":"配置开发环境","url":"/en/dev/configuration#确认系统需求","content":" 在配置开发环境之前，请确认您的桌面是否满足以下要求：  对于 Windows 7 用户： 由于本软件采用的库（PyQt6）已不再支持 Windows 10 以下的操作系统，在将来程序的库将逐步迁移至 PyQt5 以向下兼容 Windows 7。或您也可以尝试修改 Class Widgets 的代码，并打包一份兼容版本。 自 1.1.7-Beta4 起，软件已迁移至 PyQt5，现已全面支持 Windows 7。 但对于开发者来说，我们强烈不建议使用 Windows 7 开发。  操作系统\tWindows 7 及以上操作系统\tWindows 7 及以上 运行内存\t≥ 4 GB  若已满足，您还需要安装以下开发工具： 这些资源在互联网上均有大量的安装教程，故不再提供。  Python 3.8.10VS Code 或 PyCharm 等代码编辑器/集成开发环境Git  速度受网络影响 由于 Python 官网和 git 官网服务器均在国外，下载速度可能极慢。您可以使用镜像站下载。 这里列出了一些镜像站供您选用： 华为云 Python：https://mirrors.huaweicloud.com/python/ Git for Windows：https://mirrors.huaweicloud.com/git-for-windows/ Git for macOS：https://mirrors.huaweicloud.com/git-for-macos/阿里云 Python：https://mirrors.aliyun.com/python-release/  ","version":"Next","tagName":"h2"},{"title":"获取 Class Widgets​","type":1,"pageTitle":"配置开发环境","url":"/en/dev/configuration#获取-class-widgets","content":" ","version":"Next","tagName":"h2"},{"title":"克隆 Class Widgets​","type":1,"pageTitle":"配置开发环境","url":"/en/dev/configuration#克隆-class-widgets","content":" 若您要参与 Class Widgets 的开发，则需要克隆 Class Widgets 的代码到本地。以构建您的 Class Widgets 可执行文件，且便于调试插件。 您可以在 GitHub 中复刻（Fork）此项目的副本，再进行 Git 到本地开始开发。 可使用 Windows 自带的“命令行”或“终端”或 VS Code 进行克隆（三种方式任选）： 若您希望克隆您复刻的副本，请以您复刻的仓库 首先，在资源管理器中打开要克隆到本地的文件夹，然后在地址栏输入 cmd；    打开命令行之后即可任选下面三种方式克隆：  HTTPSSSHGitHub CLI git clone https://github.com/{repo_owner}/Class-Widgets.git   ","version":"Next","tagName":"h3"},{"title":"安装 Requirements (依赖)​","type":1,"pageTitle":"配置开发环境","url":"/en/dev/configuration#安装-requirements-依赖","content":" 在刚才执行克隆操作的命令行中输入  pip install -r requirements.txt   速度受网络影响 由于要从国外的服务器下载软件，速度可能极慢。 这里列出了一些镜像站供您选用： 华为云 https://mirrors.huaweicloud.com/repository/pypi/simple阿里云 http://mirrors.aliyun.com/pypi/simple/清华大学 https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple 使用如下命令配置镜像源： pip config set global.index-url URL 只需要把 URL 替换为上面的镜像地址即可。  ","version":"Next","tagName":"h3"},{"title":"运行 Class Widgets​","type":1,"pageTitle":"配置开发环境","url":"/en/dev/configuration#运行-class-widgets","content":" 完成上述操作后，即可按照接下来的步骤运行您的 Class Widgets。  打开 VS Code点击“打开文件夹”并选择 您克隆的位置    即可打开 Class Widgets 项目 ","version":"Next","tagName":"h2"},{"title":"开始编写您的第一个插件","type":0,"sectionRef":"#","url":"/en/dev/plugin/overview","content":"","keywords":"","version":"Next"},{"title":"设置开发环境​","type":1,"pageTitle":"开始编写您的第一个插件","url":"/en/dev/plugin/overview#设置开发环境","content":" 详见“配置 Class Widgets 开发环境”  ","version":"Next","tagName":"h2"},{"title":"创建项目​","type":1,"pageTitle":"开始编写您的第一个插件","url":"/en/dev/plugin/overview#创建项目","content":" 您可以通过项目模板来快速构建一个可以运行的插件。  前往插件模板仓库中使用此模板创建您的插件仓库；    note 若您希望您的插件能在“插件广场”上架的话，请注意仓库的命名请不要与在“插件广场”的任意项目重合。  将您创建的仓库使用 Git 克隆至本地；  tip 建议将您的项目放在 Class Widgets 的 plugins 目录下，以更好地测试插件。  使用您的IDE打开您的项目文件夹。🎉大功告成！ 插件模板已配置了绝大多数内容，接下来，您仅需要了解下列简单的内容即可，无需您手动创建/修改。  ","version":"Next","tagName":"h2"},{"title":"插件配置文件​","type":1,"pageTitle":"开始编写您的第一个插件","url":"/en/dev/plugin/overview#插件配置文件","content":" 插件配置文件将会位于项目根目录下的plugin.json，配置文件包含了插件的基本信息。使用插件模板创建的项目的配置文件已经配置，您只需按需进行微调。 下面将会是配置文件的基本属性：  预览：​   { &quot;name&quot;: &quot;Class Widgets 插件模板&quot;, &quot;description&quot;: &quot;这里是简介，用简短的语言描述插件的功能。&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;plugin_ver&quot;: 1, &quot;author&quot;: &quot;你的名字&quot;, &quot;settings&quot;: true, &quot;url&quot;: &quot;https://github.com/{repo-owner}/{repo}&quot;, &quot;branch&quot;: &quot;main&quot;, &quot;update_date&quot;: &quot;yyyy/mm/dd&quot; }   属性：​  名称\t填写类型\t说明名称\t填写类型\t说明 name\tstr\t插件在插件广场/管理器中显示的名称，不具备唯一性。 description\tstr\t插件的描述。 version\tstr\t插件的版本，例如：1.0.0。 plugin_ver\tint\t插件面向的 Class Widgets 版本，若该版本不同于 Class Widgets 支持的插件版本，将会在“插件广场”弹出兼容性提示。您可以在 Class Widgets 的./config.ini中的Plugin-&gt;version中找到该值。 author\tstr\t插件作者，通常可填写您的 GitHub 名称。在“插件广场”中点击其将会跳转至您的 GitHub 账户页面 settings\tbool\t若您的插件有写设置页，请填写true，否则填写false。 url\tstr\t插件的仓库地址，例如：https://github.com/{repo-owner}/{repo} branch\tstr\t您的插件分支，例如：mainmaster。 update_date\tstr\t插件的更新时间，例如2099/12/31，此值通常会自行更新。  ","version":"Next","tagName":"h2"},{"title":"启动预制插件​","type":1,"pageTitle":"开始编写您的第一个插件","url":"/en/dev/plugin/overview#启动预制插件","content":" 若您将您的项目放置在 Class Widgets 的plugins文件夹，即可方便地调试插件。 1在“设置”中启用您的插件； ] 2重新启动 Class Widgets； 3若在控制台中看到如下内容即代表插件成功加载。   2099-12-32 09:41:00.000 | SUCCESS | plugin:load_plugins:40 - 加载插件成功：plugins.cw-example-plugin   ","version":"Next","tagName":"h2"},{"title":"继续开发……​","type":1,"pageTitle":"开始编写您的第一个插件","url":"/en/dev/plugin/overview#继续开发","content":" 您可以继续根据本文档来进一步了解如何开发插件，当然如果有什么不明白的也欢迎一起交流探讨。 ","version":"Next","tagName":"h2"},{"title":"开始","type":0,"sectionRef":"#","url":"/en/instruction/","content":"","keywords":"","version":"Next"},{"title":"👋 欢迎使用 Class Widgets​","type":1,"pageTitle":"开始","url":"/en/instruction/#-欢迎使用-class-widgets","content":" 感谢您选择 Class Widgets！ 此使用文档将会带领你设置 Class Widgets 和回答一些常见问题。 目前使用文档还在持续编写(～￣▽￣)～，会在未来进一步完善的！  ","version":"Next","tagName":"h2"},{"title":"🔗 相关链接​","type":1,"pageTitle":"开始","url":"/en/instruction/#-相关链接","content":" Class Widgets 官网 Class Widgets 开发文档 GitHub 页面 QQ群  ","version":"Next","tagName":"h2"},{"title":"⬇️ 详细了解 Class Widgets​","type":1,"pageTitle":"开始","url":"/en/instruction/#️-详细了解-class-widgets","content":" GitHub: https://github.com/Class-Widgets/Class-Widgets Release 发布页：https://github.com/Class-Widgets/Class-Widgets/releases 哔哩哔哩：https://www.bilibili.com/video/BV1xwW9eyEGu/ ","version":"Next","tagName":"h2"},{"title":"Class Widgets 进阶设置","type":0,"sectionRef":"#","url":"/en/instruction/advanced/","content":"","keywords":"","version":"Next"},{"title":"时差偏移​","type":1,"pageTitle":"Class Widgets 进阶设置","url":"/en/instruction/advanced/#时差偏移","content":" 当学校的铃声系统和软件内铃声提醒不同步，仅需在“设置”-&gt;“高级选项”中的“时差偏移”选项卡中，即可调整偏移。 ","version":"Next","tagName":"h2"},{"title":"插件方法","type":0,"sectionRef":"#","url":"/en/dev/plugin/method","content":"","keywords":"","version":"Next"},{"title":"如何调用方法？​","type":1,"pageTitle":"插件方法","url":"/en/dev/plugin/method#如何调用方法","content":" 仅需在 self.method 中调用即可，代码如下：  from .ClassWidgets.base import PluginBase# 导入CW的基类 class Plugin(PluginBase): # 定义插件类 def __init__(self, cw_contexts, method): super().__init__(cw_contexts, method) # 调用父类初始化方法 def excute(self): # 从 self.method 可调用方法 self.method.register_widget(WIDGET_CODE, WIDGET_NAME, WIDGET_WIDTH) # 注册小组件 self.method.other_function() # 和更多组件   ","version":"Next","tagName":"h3"},{"title":"插件方法​","type":1,"pageTitle":"插件方法","url":"/en/dev/plugin/method#插件方法-1","content":" 注册小组件 (register_widget)​  self.method.register_widget(widget_code=str, widget_name=str, widget_width=int) 您可以通过此方法注册一个或多个小组件。  from .ClassWidgets.base import PluginBase# 导入CW的基类 WIDGET_CODE = 'your-plugin-name.ui' # 插件代号 WIDGET_NAME = '你的插件名称' # 您的插件显示的名称 WIDGET_WIDTH = 245 class Plugin(PluginBase): # 定义插件类 def __init__(self, cw_contexts, method): super().__init__(cw_contexts, method) # 调用父类初始化方法 self.method.register_widget(WIDGET_CODE, WIDGET_NAME, WIDGET_WIDTH) # 注册小组件   这条语句用于向 Class Widgets 注册您的小组件。  获取小组件（get_widget）​  self.method.get_widget(widget_code=str) 您可以通过此方法获取任意一个小组件的实例，并对这个实例进行操作  &quot;&quot;&quot; 其他代码 &quot;&quot;&quot; from .ClassWidgets.base import PluginBase# 导入CW的基类 class Plugin(PluginBase): # 定义插件类 def __init__(self, cw_contexts, method): super().__init__(cw_contexts, method) # 调用父类初始化方法 self.method.register_widget(WIDGET_CODE, WIDGET_NAME, WIDGET_WIDTH) # 注册小组件 def excute(self): # 启动执行 self.your_plugin = self.method.get_widget(WIDGET_CODE) # 获取小组件对象 &quot;&quot;&quot; 接下来就可以对 self.your_plugin 进行各种修改了。 &quot;&quot;&quot;   修改组件内容（change_widget_content）​  self.method.change_widget_content(widget_code=str, title=str, content=str) 在需求不大时，可以用此方法修改一些小组件的内容  &quot;&quot;&quot; 其他代码 &quot;&quot;&quot; from .ClassWidgets.base import PluginBase# 导入CW的基类 WIDGET_CODE = 'your-plugin-name.ui' # 插件代号 WIDGET_NAME = '你的插件名称' # 您的插件显示的名称 WIDGET_WIDTH = 245 class Plugin(PluginBase): # 定义插件类 def __init__(self, cw_contexts, method): super().__init__(cw_contexts, method) # 调用父类初始化方法 self.method.register_widget(WIDGET_CODE, WIDGET_NAME, WIDGET_WIDTH) # 注册小组件   修改小组件宽度 (adjust_widget_width)​  self.method.change_widget_content(widget_code=str, width=int) 您可以通过此方法来动态地修改小组件在屏幕上显示的宽度  &quot;&quot;&quot; 其他代码 &quot;&quot;&quot; from .ClassWidgets.base import PluginBase# 导入CW的基类 from random import randint class Plugin(PluginBase): # 定义插件类 def __init__(self, cw_contexts, method) super().__init__(cw_contexts, method) # 调用父类初始化方法 self.method.register_widget(WIDGET_CODE, WIDGET_NAME, WIDGET_WIDTH) # 注册小组件 def update(self, cw_contexts): super().update(cw_contexts) # 获取最新的接口内容 random_width = randint(100, 500) # 随机获取 100~500 的范围的整数数字 self.method.adjust_widget_width(WIDGET_CODE, random_width)   发送通知（send_notification）​  self.method.send_notification( state=int, lesson_name=str, title=str, subtitle=str, content=str, icon=str, duration=int )   您可以通过此方法来使 Class Widgets 发送自定义的通知  键（Key）\t内容键（Key）\t内容 state\t通知类型（0, 2分别为放学和下课；1为上课通知；3为预备铃；4为自定义通知） lesson_name\t课程名称（仅在1、2中生效） title\t通知标题（仅在4中生效） subtitle\t通知副标题（仅在4中生效） content\t通知标题（仅在4中生效） icon\t图标，可传入任意图标的路径（如pngjpggif） duration\t通知显示时长（单位：毫秒）  &quot;&quot;&quot; 其他代码 &quot;&quot;&quot; from .ClassWidgets.base import PluginBase# 导入CW的基类 class Plugin(PluginBase): # 定义插件类 def __init__(self, cw_contexts, method): super().__init__(cw_contexts, method) # 调用父类初始化方法 # 若要引用插件目录的内容，需在目录前添加插件的工作目录： self.plugin_dir = self.cw_contexts['PLUGIN_PATH'] def excute(self): # 启动执行 self.method.send_notification( state=4, # 自定义通知 title='通知标题'， subtitle='副标题', content='你好，世界。', # 内容 icon=f'{self.plugin_dir}/path/to/your/image.png', # 自定义通知图标 duration=5000 # 通知将显示5秒 )  ","version":"Next","tagName":"h3"},{"title":"个性化 Class Widgets","type":0,"sectionRef":"#","url":"/en/instruction/advanced/customization","content":"","keywords":"","version":"Next"},{"title":"介绍​","type":1,"pageTitle":"个性化 Class Widgets","url":"/en/instruction/advanced/customization#介绍","content":"   Class Widgets 支持多项自定义设置！您可以在此页面自由定义属于您的 Class Widgets。  ","version":"Next","tagName":"h2"},{"title":"主题​","type":1,"pageTitle":"个性化 Class Widgets","url":"/en/instruction/advanced/customization#主题","content":" 在 Class Widgets 中，您可以选择适合的主题。对于支持亮暗色的主题，将会在颜色模式切换时更换不同的风格。 详见 “主题” 板块。  ","version":"Next","tagName":"h2"},{"title":"自定义倒计时​","type":1,"pageTitle":"个性化 Class Widgets","url":"/en/instruction/advanced/customization#自定义倒计时","content":"   Class Widgets 支持在小组件中添加自定义倒计时，可用于选择特定节日（如：中、高考等）。 仅需在“自定义”中“自定义倒计时”板块下填入节日日期和名称即可。  tip 在使用“自定义倒计时”前，需添加这个小组件。  ","version":"Next","tagName":"h3"},{"title":"天气​","type":1,"pageTitle":"个性化 Class Widgets","url":"/en/instruction/advanced/customization#天气","content":"   Class Widgets 可获取所设定地区的天气信息，并以小组件的形式展示。您可以在“自定义”-&gt;“天气”板块下调整相关设置，详见“天气”。  tip 在使用“天气”前，需添加这个小组件。 ","version":"Next","tagName":"h3"},{"title":"上下课提醒","type":0,"sectionRef":"#","url":"/en/instruction/advanced/notification","content":"","keywords":"","version":"Next"},{"title":"介绍​","type":1,"pageTitle":"上下课提醒","url":"/en/instruction/advanced/notification#introduction","content":"   Class Widgets 将会在特殊的时间节点发出通知提醒（如上下课提醒）。    您可在“提醒”中自定义关于提醒弹窗的设置。在发出提醒时，Class Widgets 默认会开启“强调特效”，且会提示音。 您还可以在“预备铃”选项卡中调整预备铃的提前时间，若设置为0则禁用。 ","version":"Next","tagName":"h2"},{"title":"常见问题","type":0,"sectionRef":"#","url":"/en/instruction/faq/","content":"常见问题 本章节将带领你如何处理 Class Widgets 中的一些用户能解决的常见问题。","keywords":"","version":"Next"},{"title":"主题","type":0,"sectionRef":"#","url":"/en/instruction/advanced/theme","content":"","keywords":"","version":"Next"},{"title":"介绍​","type":1,"pageTitle":"主题","url":"/en/instruction/advanced/theme#介绍","content":"   在设置的“自定义”板块中，您可以找到如上的设置选项卡。 您可以通过“主题”选项卡快速切换您喜爱的主题；还可以通过“颜色模式”选项卡快速更改软件的外观。 💡 提示： 若要缩小小组件的大小，可在“主题”中选择“小尺寸”即可。 💡 注意： 如果您导入的主题不支持深色模式，在切换到暗色模式时，小组件不会发生改变。  ","version":"Next","tagName":"h3"},{"title":"导入第三方主题​","type":1,"pageTitle":"主题","url":"/en/instruction/advanced/theme#导入第三方主题","content":" 目前，您可以通过导入第三方主题来美化 Class Widgets。    首先，先将下载到的第三方主题解压为独立的文件夹。然后将其移动到 Class Widgets 的“主题”文件夹通常在：./ui/（也可以点击“打开‘主题’文件夹”），然后重新启动 Class Widgets 即可在“主题”选项卡中看到导入的第三方主题名称。  ","version":"Next","tagName":"h3"},{"title":"制作第三方主题​","type":1,"pageTitle":"主题","url":"/en/instruction/advanced/theme#制作第三方主题","content":" 详见“制作第三方主题”。 ","version":"Next","tagName":"h3"},{"title":"“插件广场”无法联网","type":0,"sectionRef":"#","url":"/en/instruction/faq/pp-network","content":"","keywords":"","version":"Next"},{"title":"问题​","type":1,"pageTitle":"“插件广场”无法联网","url":"/en/instruction/faq/pp-network#问题","content":" 当您在访问“插件广场”时发现如图的情况：  即意味着当前您暂时无法访问插件广场。  ","version":"Next","tagName":"h2"},{"title":"解决方案​","type":1,"pageTitle":"“插件广场”无法联网","url":"/en/instruction/faq/pp-network#解决方案","content":" 可尝试更换当前所选的镜像源以解决问题。  点击“插件广场”窗口中位于左下角的“设置”以进入设置页；切换一个镜像源； 重新打开插件广场。  ","version":"Next","tagName":"h2"},{"title":"仍无法解决？​","type":1,"pageTitle":"“插件广场”无法联网","url":"/en/instruction/faq/pp-network#仍无法解决","content":" 请将附带有错误信息的截图（如图）在我们的社区中寻求帮助。 ","version":"Next","tagName":"h2"},{"title":"天气 & API Key","type":0,"sectionRef":"#","url":"/en/instruction/advanced/weather","content":"","keywords":"","version":"Next"},{"title":"介绍​","type":1,"pageTitle":"天气 & API Key","url":"/en/instruction/advanced/weather#介绍","content":"   在设置的“自定义”板块中，您可以找到如上的设置选项卡。 您可以通过“选择城市”选项卡选取您的地区以获得当地的天气数据；还可以在“设置天气源”选项卡更改软件使用的天气源。 💡 注意： 某些天气源需要设置 Key 才能正常使用，若无特殊情况，仅需使用默认天气源即可。  ","version":"Next","tagName":"h3"},{"title":"获取 API Key​","type":1,"pageTitle":"天气 & API Key","url":"/en/instruction/advanced/weather#获取-api-key","content":" 若您因为某些需求不得不使用其他天气源，且此天气源需要 API Key，则请继续阅读。 💡 提示： 接下来的颜色将以“和风天气”为例，其他的天气源的获取方式也可参考。  Step 1. 进入网页​  首先，打开和风天气开发服务网页，然后点击“免费注册”按钮。    然后，注册您的“和风天气”账号并登录此账号。  Step 2. 打开“控制台”​    在进入用户中心后，点击“开发服务控制台”按钮进入控制台。在侧边栏中选中“项目管理”，然后点击“创建项目”按钮。    Step 3. 生成API Key​  在“创建项目”页面中填入任意字段，并在“选择订阅”中选择免费订阅，即可创建。    创建项目后，选择“创建凭据”，进入此界面。    填入任意字段后，点击“创建”，就会进入完成页。 在完成页，将会显示已被创建的 API Key，接下来您仅需复制 API Key，并粘贴在天气设置选项卡的“设置API Key”选项卡的文本框即可。   ","version":"Next","tagName":"h3"},{"title":"安装","type":0,"sectionRef":"#","url":"/en/instruction/install","content":"","keywords":"","version":"Next"},{"title":"确认系统需求​","type":1,"pageTitle":"安装","url":"/en/instruction/install#确认系统需求","content":" 项目\t要求操作系统\tWindows 7 以上 运行内存\t建议 4GB+  若已满足，请进行接下来的步骤。  ","version":"Next","tagName":"h2"},{"title":"下载 Class Widgets​","type":1,"pageTitle":"安装","url":"/en/instruction/install#下载-class-widgets","content":" 您可通过点击此卡片下载 Class Widgets 的二进制文件：    ","version":"Next","tagName":"h2"},{"title":"解压和运行​","type":1,"pageTitle":"安装","url":"/en/instruction/install#解压和运行","content":" 下载完成后，将软件解压到一个独立的文件夹，然后在解压后的文件夹找到 ClassWidgets.exe 或 ClassWidgets 即可运行。  tip 解压时请不要使用“在线解压”功能、尽量不要直接解压在“下载”文件夹或其他功能不单一的文件夹中，否则可能会出现无法预知的问题。 请放到单独的文件夹中（如：文档\\ClassWidgets）  ","version":"Next","tagName":"h2"},{"title":"升级 Class Widgets​","type":1,"pageTitle":"安装","url":"/en/instruction/install#升级-class-widgets","content":" 若您的计算机中已经安装了旧版本的 Class Widgets，您仅需将新版的压缩包的全部内容覆盖至原安装路径即可。  ","version":"Next","tagName":"h2"},{"title":"出现问题？​","type":1,"pageTitle":"安装","url":"/en/instruction/install#出现问题","content":" 如果在 安装/运行 中出现问题，可在社区（如GitHub、BiliBili）中求助。 ","version":"Next","tagName":"h2"},{"title":"课程表","type":0,"sectionRef":"#","url":"/en/instruction/schedule/","content":"课程表 本章节将为您介绍如何在 Class Widgets 中对课程表进行配置。","keywords":"","version":"Next"},{"title":"设置课程表","type":0,"sectionRef":"#","url":"/en/instruction/schedule/courses","content":"","keywords":"","version":"Next"},{"title":"介绍​","type":1,"pageTitle":"设置课程表","url":"/en/instruction/schedule/courses#介绍","content":"   课程表指的是在一周中的课程安排。课表的时间安排由“时间线”控制，您在开始设置课程表之前，需设置时间线。（请参考“设置时间线”）  ","version":"Next","tagName":"h2"},{"title":"设置课程表​","type":1,"pageTitle":"设置课程表","url":"/en/instruction/schedule/courses#设置课程表-1","content":"   您可以使用下面的操作按钮和设置项对课程表进行添加操作。或使用“快速添加课程”功能快速配置课程。  ","version":"Next","tagName":"h2"},{"title":"调休与换课​","type":1,"pageTitle":"设置课程表","url":"/en/instruction/schedule/courses#调休与换课","content":" Class Widgets 支持在这种特殊情况下切换当日课程和调整课程。关于此部分内容请参考“调休与换课”。 ","version":"Next","tagName":"h2"},{"title":"调休与换课","type":0,"sectionRef":"#","url":"/en/instruction/schedule/adjustment","content":"","keywords":"","version":"Next"},{"title":"介绍​","type":1,"pageTitle":"调休与换课","url":"/en/instruction/schedule/adjustment#介绍","content":"   在点击“当前活动”小组件或在托盘菜单点击“额外选项”后，您将见到此窗口。  warning 自从 1.1.7-Beta4 后，若需要快速打开“额外选项”窗口，则需要右键“当前活动”小组件。（若您使用的是触摸屏，则可以长按进入）  在这个窗口，您可以调整当日课表内容及切换各个星期的课程表。    warning 在“额外选项”窗口中的“调休与换课”中的所有选项都会在 Class Widgets 重启后失效！ 若课程计划的变动是长期的，请在“设置”中更改。  ","version":"Next","tagName":"h2"},{"title":"调休​","type":1,"pageTitle":"调休与换课","url":"/en/instruction/schedule/adjustment#调休","content":" 当您遇到调休（即在被调休节假日补课）或其他情况需要上其他星期的课程，    您就可以打开“额外选项”窗口，点击“设置调休星期”选项卡右侧的下拉栏，选择您需要切换到的星期，设置完点击“保存”后 Class Widgets 将会应用所设定星期的课表。  ","version":"Next","tagName":"h2"},{"title":"换课​","type":1,"pageTitle":"调休与换课","url":"/en/instruction/schedule/adjustment#换课","content":" 当今日课程计划有所变化时，可在“换课”板块下编辑课程表，设置完成后点击“保存”后 Class Widgets 将立即应用所设定的课程表。 ","version":"Next","tagName":"h2"},{"title":"课程表文件","type":0,"sectionRef":"#","url":"/en/instruction/schedule/file","content":"","keywords":"","version":"Next"},{"title":"创建\\切换 课程表文件​","type":1,"pageTitle":"课程表文件","url":"/en/instruction/schedule/file#创建切换-课程表文件","content":" 在 Class Widgets，您可以创建多个不同的课程表文件。课程表文件也可以即时切换。您可以在“设置”-&gt;“高级选项”中找到“选择课程表配置”选项卡， 点击右侧的下拉栏，即可展开您本地中存储的所有课程表文件，同时您也可以在下拉栏的列表中点击“添加新课表”以创建新的课程表。 另外，可以编辑在下拉栏左侧的文本框以更改课程表文件的名字。  ","version":"Next","tagName":"h2"},{"title":"课程表文件管理​","type":1,"pageTitle":"课程表文件","url":"/en/instruction/schedule/file#课程表文件管理","content":" 此外，您还可以对这些文件进行导入/导出操作，您仅需在“设置”的侧边栏中选择“配置文件”进行。 ","version":"Next","tagName":"h2"},{"title":"设置时间线","type":0,"sectionRef":"#","url":"/en/instruction/schedule/timeline","content":"","keywords":"","version":"Next"},{"title":"介绍​","type":1,"pageTitle":"设置时间线","url":"/en/instruction/schedule/timeline#introduction","content":" 时间线规定了在一天中各个节点和活动时长，如课程、课间等。Class Widgets 将根据时间线及当前时间显示课程表中对应的课程。    ","version":"Next","tagName":"h2"},{"title":"编辑时间线​","type":1,"pageTitle":"设置时间线","url":"/en/instruction/schedule/timeline#editing-timeline","content":"   让我们了解如何设置时间线。 设置界面分为上、下两个部分，在上面可以设置每个时段的“节点”（即时段，如上午时段、下午时段、晚修等），在下面可以分别为每个“节点”添加时间段（即活动类型，如上课、课间、大课间等）。  详细了解时间段和节点 时间段： 即一个有 持续时间 活动，但没有指定开始/结束时间，需要与“节点”配合使用。（如：上课、课间、大课间等） 节点： 是一天中一段时间内所有时间段的结合，通常会指定一个开始时间。在一个节点下的“时间段”会按顺序逐步累加起来成为一个时间段（如：上午时段、下午时段和晚修等）  warning 节点的时间采用 24 小时制，请注意不要写成 12 小时制。（目前已出现 3 次案例）    在每个编辑界面通常会配有三个操作按钮，分别对应“添加”、“编辑”及“删除”操作。可通过调整编辑页的选项以做出您希望的更改。  ","version":"Next","tagName":"h2"},{"title":"设置节点​","type":1,"pageTitle":"设置时间线","url":"/en/instruction/schedule/timeline#adding-nodes","content":" 接下来的教程将以这张来自于某个学校（划掉的作息时间表举例。    在其中可以发现这一天的课程被分为了两个时段：  时段\t开始时间时段\t开始时间 上午\t7:30 下午\t14:40  接下来我们仅需根据 图二 将其依次录入“节点”列表中即可。 若您的学校时间安排在某些时候并不一致，请参考多时间线录入 。  ","version":"Next","tagName":"h3"},{"title":"添加时间线​","type":1,"pageTitle":"设置时间线","url":"/en/instruction/schedule/timeline#setting-timeline","content":" 在节点设置完后，即可进行以下步骤。 还是根据前文的课程表举例，从中我们能得到以下信息：  活动类型\t持续时长（分钟）活动类型\t持续时长（分钟） 课程（早读）\t30 课间\t10 课程\t40（课程通常为 40 分钟） 课间\t10 课程（大课间）\t20 课间\t5 课程\t40 课间\t10 课程\t40 课间\t15 …\t…  将其中的信息根据 图二 依次并填入即可。 若您的学校时间安排在某些时候并不一致，请参考多时间线录入。并在“默认”时间线中录入通常使用的时间线。  ","version":"Next","tagName":"h3"},{"title":"多时间线录入​","type":1,"pageTitle":"设置时间线","url":"/en/instruction/schedule/timeline#multiple-timeline","content":" 若您的学校在某天的时间安排与平常不一致，可将该天的时间线单独录入。    首先，点击右上角的下拉框，选择您想要调整的星期即可。若您反悔，不希望改变当天时间线，只需把当日的所有时间点删除即可。    若当天节点安排不一致，仅需添加另一个节点即可解决。 ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}